from typing import List

import pandas as pd

from autorag.nodes.queryexpansion.base import BaseQueryExpansion
from autorag.utils import result_to_dataframe

decompose_prompt = """You are an AI assistant that decomposes user questions about Fujifilm cameras into smaller sub-questions when needed.

## Context
- There are five Fuji camera models: [ "gfx100ii", "x-e4", "x-s20", "x-t5", "x100v" ].
- Each camera's manual is stored in page-level JSON files with metadata (model, chapter, section, subsection).
- The user may:
  1. Select a specific camera model before asking (in which case we only search that model), or
  2. Not specify a model at all (in which case we search all models).
- We want to split (decompose) the question if it asks about multiple models or multiple features/settings.

## Rules
1. If the user question explicitly references more than one camera model (e.g., “GFX100ii” and “X-T5”), decompose it by model if it makes sense.
2. If the user question contains multiple features/settings (e.g., aperture, shutter speed, ISO), decompose it by feature if needed.
3. If the question references multiple models AND multiple features, decompose into sub-questions covering each (model, feature) pair or in a logical grouping.
4. If the question is simple—only one model or no model, and just one feature/intent—then return:
   **The question needs no decomposition**

## Your Task
Given a user question about Fujifilm cameras, follow the above rules.  
- If multiple models or multiple features are asked about, split the question.  
- Otherwise, respond with “The question needs no decomposition”.

Example 1
Question: How do I adjust aperture on the GFX100ii and also set shutter speed on the X-T5?

Decompositions:
1: How do I adjust aperture on the GFX100ii?
2: How do I set shutter speed on the X-T5?

Example 2
Question: Is face detection available on the X-S20?

Decompositions:
The question needs no decomposition

Example 3
Question: Which Fuji cameras have a built-in flash?

Decompositions:
The question needs no decomposition


Example 4
Question: The X-E4's LCD tilt screen vs. the X-T5's — are they the same? Also, how many MP does the GFX100ii have?

Decompositions:
1: Is the X-E4's LCD tilt screen the same as the X-T5's?
2: How many megapixels does the GFX100ii have?

Example 5
Question: {question}

Decompositions:
"""

class QueryDecompose(BaseQueryExpansion):
	@result_to_dataframe(["queries"])
	def pure(self, previous_result: pd.DataFrame, *args, **kwargs):
		queries = self.cast_to_run(previous_result, *args, **kwargs)

		# pop prompt from kwargs
		prompt = kwargs.pop("prompt", decompose_prompt)
		kwargs.pop("generator_module_type", None)

		expanded_queries = self._pure(queries, prompt, **kwargs)
		return self._check_expanded_query(queries, expanded_queries)

	def _pure(
		self, queries: List[str], prompt: str = decompose_prompt, *args, **kwargs
	) -> List[List[str]]:
		"""
		decompose query to little piece of questions.
		:param queries: List[str], queries to decompose.
		:param prompt: str, prompt to use for query decomposition.
			default prompt comes from Visconde's StrategyQA few-shot prompt.
		:return: List[List[str]], list of decomposed query. Return input query if query is not decomposable.
		"""
		full_prompts = []
		for query in queries:
			if bool(prompt):
				full_prompt = f"prompt: {prompt}\n\n question: {query}"
			else:
				full_prompt = decompose_prompt.format(question=query)
			full_prompts.append(full_prompt)
		input_df = pd.DataFrame({"prompts": full_prompts})
		result_df = self.generator.pure(previous_result=input_df, *args, **kwargs)
		answers = result_df["generated_texts"].tolist()
		results = list(
			map(lambda x: get_query_decompose(x[0], x[1]), zip(queries, answers))
		)
		return results


def get_query_decompose(query: str, answer: str) -> List[str]:
	"""
	decompose query to little piece of questions.
	:param query: str, query to decompose.
	:param answer: str, answer from query_decompose function.
	:return: List[str], list of a decomposed query. Return input query if query is not decomposable.
	"""
	if answer.lower() == "the question needs no decomposition":
		return [query]
	try:
		lines = [line.strip() for line in answer.splitlines() if line.strip()]
		if lines[0].startswith("Decompositions:"):
			lines.pop(0)
		questions = [line.split(":", 1)[1].strip() for line in lines if ":" in line]
		if not questions:
			return [query]
		return questions
	except:
		return [query]

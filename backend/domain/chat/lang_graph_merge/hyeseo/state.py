import operator
from typing import Optional
from pydantic import BaseModel
from typing_extensions import TypedDict, Annotated
from langgraph.graph.message import add_messages


class SonyState(TypedDict):
    question: Annotated[str, "Question"] # parentgraph 와 공유
    transform_question: Annotated[list, "Transformed queries generated by LLM"]
    multi_context: Annotated[list[str], operator.add]
    ensemble_context: Annotated[str, "Ensemble_context"]
    filtered_context: Annotated[str, "Filtering Context"]
    rerank_context : Annotated[str, "Context"]
    answer: Annotated[str, "Answer"] # parentgraph 로 전송
    sessionId: int
    messageId: int
    context: Annotated[list, "Context"]
    
class OverallState(TypedDict):
    question: Annotated[str, "Question"]
    ex_question: Annotated[str, "issettingbeforequstion"]
    brand: Annotated[Optional[str],"brandname"]
    model: Annotated[Optional[str],"modelname"]
    context: Annotated[list, "Context"]
    message: Annotated[list, add_messages]
    answer: Annotated[str, "Answer"]
    keyword: Annotated[list, "keywordExtract"]
    suggest_question: Annotated[list, "suggestquestion"]
    validation_results: dict
    sessionId: int
    messageId: int
    next_step: Annotated[str, "routerstep"]
    relevance: Annotated[str, "relevance"]

class Queries(BaseModel):
    Query: list[str]

class Document(BaseModel):
    retreive_document: str

class AllDocument(BaseModel):
    docuemnt: str

class QueryState(TypedDict):
    question: str
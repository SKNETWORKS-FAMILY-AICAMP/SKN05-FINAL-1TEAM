import operator
from typing import Optional
from pydantic import BaseModel
from typing_extensions import TypedDict, Annotated
from langgraph.graph.message import add_messages


class SonyState(TypedDict):
    question: Annotated[str, "Question"] # parentgraph 와 공유
    transform_question: Annotated[list, "Transformed queries generated by LLM"]
    multi_context: Annotated[list[str], operator.add]
    ensemble_context: Annotated[str, "Ensemble_context"]
    filtered_context: Annotated[str, "Filtering Context"]
    rerank_context : Annotated[str, "Context"]
    answer: Annotated[str, "Answer"] # parentgraph 로 전송
    sessionId: Annotated[int, "SessionID"]
    messageId: Annotated[int, "MessageID"]
    context: Annotated[list, "Context"]
    model: Annotated[Optional[str], "Model Name"]  # 모델 필드 추가

class Queries(BaseModel):
    Query: list[str]

class Document(BaseModel):
    retreive_document: str

class AllDocument(BaseModel):
    docuemnt: str

class QueryState(TypedDict):
    question: str
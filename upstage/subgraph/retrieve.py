from typing import Annotated, TypedDict, List
import retriever
import ensemble_retriever
import bm25_retriever

# 🔹 질문 관련 State
class QuestionState(TypedDict):
    question: Annotated[str, "Original question from user"]
    transform_question: Annotated[List[str], "Transformed queries generated by LLM"]  # List 타입 유지

# 🔹 검색 및 컨텍스트 관련 State
class ContextRetrievalState(TypedDict):
    ensemble_context: Annotated[str, "Ensemble Retrieved Context"]
    multi_context: Annotated[str, "Multi Query Retrieved Context"]
    merge_context: Annotated[str, "Merged Context"]
    filtered_context: Annotated[str, "Filtered Context"]
    rerank_context: Annotated[str, "Reranked Context"]  # 표준화된 key 이름 유지

# 🔹 답변 및 메시지 관련 State
class AnswerState(TypedDict):
    answer: Annotated[str, "Final Answer"]
    message: Annotated[List[dict], "Message history"]  # List[dict]로 변경

# 🔹 전체 Graph State (각 State 포함)
class GraphState(TypedDict):
    question_state: QuestionState
    context_retrieval_state: ContextRetrievalState
    answer_state: AnswerState


# 🔹 **기본 Retriever를 이용하여 문서 검색**
def retrieve_document(state: GraphState) -> GraphState:
    """
    기본 Retriever를 사용하여 질문에 대한 문서를 검색합니다.
    """
    question = state["question_state"]["question"]  # 질문 가져오기
    documents = retriever.invoke(question)  # 기본 retriever 호출
    print(f"🔎 Retrieved documents: {documents}")

    # 업데이트된 State 반환
    state["context_retrieval_state"]["multi_context"] = documents  # multi_query에서 가져온 컨텍스트
    return state


# 🔹 **Ensemble Retriever를 이용한 검색**
def ensemble_document(state: GraphState) -> GraphState:
    """
    Ensemble Retriever를 사용하여 질문에 대한 문서를 검색합니다.
    """
    question = state["question_state"]["question"]  # 질문 가져오기
    documents = ensemble_retriever.invoke(question)  # Ensemble retriever 호출
    print(f"🔎 Ensemble Retrieved documents: {documents}")

    # 업데이트된 State 반환
    state["context_retrieval_state"]["ensemble_context"] = documents  # Ensemble retrieval 적용 결과 저장
    return state


# 🔹 **BM25 Retriever를 이용한 검색 (옵션)**
def bm25_document(state: GraphState) -> GraphState:
    """
    BM25 기반 검색을 수행합니다.
    """
    question = state["question_state"]["question"]  # 질문 가져오기
    if bm25_retriever:
        documents = bm25_retriever.invoke(question)  # BM25 retriever 호출
        print(f"🔎 BM25 Retrieved documents: {documents}")

        # 업데이트된 State 반환
        state["context_retrieval_state"]["filtered_context"] = documents  # BM25 기반 컨텍스트 저장
    else:
        print("⚠️ BM25 Retriever가 존재하지 않습니다. 기본 검색만 수행됩니다.")

    return state

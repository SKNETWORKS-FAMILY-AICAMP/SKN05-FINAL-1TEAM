from typing import Annotated, TypedDict, List

# 1. 질문 관련 State
class QuestionState(TypedDict):
    question: Annotated[str, "Question"]
    transform_question: Annotated[List[str], "Transformed queries generated by LLM"]  # List로 변경

# 2. 검색 및 컨텍스트 관련 State
class ContextRetrievalState(TypedDict):
    ensemble_context: Annotated[str, "Ensemble Retrieve"]
    multi_context: Annotated[str, "Multi Query"]
    merge_context: Annotated[str, "Merge Context"]
    filtered_context: Annotated[str, "Filtering Context"]
    rerank_context: Annotated[str, "Reranked Context"]  # reranked context 혹은 context로 표기하기

# 3. 답변 및 메시지 관련 State
class AnswerState(TypedDict):
    answer: Annotated[str, "Answer"]
    message: Annotated[List[dict], "Messages"] # add_messages type hint 제거. List[dict]로 명시


# 4. 전체 Graph State (각 부분 State를 포함)
class SonyState(TypedDict): 
    question_state: QuestionState
    context_retrieval_state: ContextRetrievalState
    answer_state: AnswerState


# # 사용 예시:
# initial_state: GraphState = {
#     "question_state": {
#         "question": "What is the capital of France?",
#         "transform_question": []  # 초기 빈 리스트
#     },
#     "context_retrieval_state": {
#         "ensemble_context": "",
#         "multi_context": "",
#         "merge_context": "",
#         "filtered_context": "",
#         "rerank_context": ""
#     },
#     "answer_state": {
#         "answer": "",
#         "message": [] # 초기 빈 리스트
#     }
# }


# # 상태 업데이트 예시:
# updated_state: GraphState = initial_state.copy() # 중요: copy()를 사용하여 원본 상태를 변경하지 않도록 함
# updated_state["question_state"]["transform_question"].append("What is the capital of France?")
# updated_state["context_retrieval_state"]["ensemble_context"] = "Paris is the capital..."
# updated_state["answer_state"]["answer"] = "Paris"
# updated_state["answer_state"]["message"].append({"role": "assistant", "content": "Paris is the capital of France."})

# print(updated_state)


# # add_message 함수를 사용하는 예시 (별도 함수로 정의)
# def add_message(state: GraphState, role: str, content: str):
#     new_message = {"role": role, "content": content}
#     updated_state = state.copy()
#     updated_state["answer_state"]["message"].append(new_message)
#     return updated_state

# updated_state = add_message(updated_state, "user", "Thank you!")
# print(updated_state)